/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { AbstractQueryClient, AbstractAccountQueryClient, AbstractAccountClient, AppExecuteMsg, AppModuleExecuteMsgBuilder, AbstractClient } from "@abstract-money/abstract.js";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { StdFee, Coin } from "@cosmjs/amino";
import { Decimal, AssetEntry, BondingPeriodSelector, Duration, InstantiateMsg, ExecuteMsg, Uint128, AnsAsset, QueryMsg, MigrateMsg, Expiration, Timestamp, Uint64, ArrayOfTupleOfStringAndArrayOfClaim, Claim, ArrayOfClaim, Addr, PoolAddressBaseForAddr, AssetInfoBaseForAddr, PoolType, Config, PoolMetadata } from "./Autocompounder.types";
import { AutocompounderQueryClient, AutocompounderClient } from "./Autocompounder.client";
import { AutocompounderQueryMsgBuilder, AutocompounderExecuteMsgBuilder } from "./Autocompounder.msg-builder";
export interface IAutocompounderAppQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string;
  config: () => Promise<Config>;
  pendingClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>["pending_claims"]>) => Promise<Uint128>;
  claims: (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>["claims"]>) => Promise<ArrayOfClaim>;
  allClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>["all_claims"]>) => Promise<ArrayOfTupleOfStringAndArrayOfClaim>;
  latestUnbonding: () => Promise<Expiration>;
  totalLpPosition: () => Promise<Uint128>;
  balance: (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>["balance"]>) => Promise<Uint128>;
  connect: (signingClient: SigningCosmWasmClient, address: string) => AutocompounderAppClient;
  address: () => Promise<string>;
}
export class AutocompounderAppQueryClient implements IAutocompounderAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: number;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.pendingClaims = this.pendingClaims.bind(this);
    this.claims = this.claims.bind(this);
    this.allClaims = this.allClaims.bind(this);
    this.latestUnbonding = this.latestUnbonding.bind(this);
    this.totalLpPosition = this.totalLpPosition.bind(this);
    this.balance = this.balance.bind(this);
  }

  config = async (): Promise<Config> => {
    return this._query(AutocompounderQueryMsgBuilder.config());
  };
  pendingClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>["pending_claims"]>): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.pendingClaims(params));
  };
  claims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>["claims"]>): Promise<ArrayOfClaim> => {
    return this._query(AutocompounderQueryMsgBuilder.claims(params));
  };
  allClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>["all_claims"]>): Promise<ArrayOfTupleOfStringAndArrayOfClaim> => {
    return this._query(AutocompounderQueryMsgBuilder.allClaims(params));
  };
  latestUnbonding = async (): Promise<Expiration> => {
    return this._query(AutocompounderQueryMsgBuilder.latestUnbonding());
  };
  totalLpPosition = async (): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.totalLpPosition());
  };
  balance = async (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>["balance"]>): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.balance(params));
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
  address = async (): Promise<string> => {
    if (!this._moduleAddress) {
      this._moduleAddress = await this.accountQueryClient.getModuleAddress(this.moduleId);
    }

    return this._moduleAddress;
  };
  connect = (signingClient: SigningCosmWasmClient, address: string): AutocompounderAppClient => {
    return new AutocompounderAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.upgrade(signingClient, address)
    });
  };
}
export interface IAutocompounderAppClient extends IAutocompounderAppQueryClient {
  accountClient: AbstractAccountClient;
  updateFeeConfig: (params: CamelCasedProperties<Extract<QueryMsg, {
    update_fee_config: unknown;
  }>["update_fee_config"]>, _funds?: Coin[]) => Promise<UpdateFeeConfigResponse>;
  deposit: (params: CamelCasedProperties<Extract<QueryMsg, {
    deposit: unknown;
  }>["deposit"]>, _funds?: Coin[]) => Promise<DepositResponse>;
  withdraw: (_funds?: Coin[]) => Promise<WithdrawResponse>;
  compound: (_funds?: Coin[]) => Promise<CompoundResponse>;
  batchUnbond: (_funds?: Coin[]) => Promise<BatchUnbondResponse>;
}
export class AutocompounderAppClient extends AutocompounderAppQueryClient implements IAutocompounderAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: number;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.compound = this.compound.bind(this);
    this.batchUnbond = this.batchUnbond.bind(this);
  }

  updateFeeConfig = async (params: CamelCasedProperties<Extract<QueryMsg, {
    update_fee_config: unknown;
  }>["update_fee_config"]>, _funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.updateFeeConfig(params), _funds);
  };
  deposit = async (params: CamelCasedProperties<Extract<QueryMsg, {
    deposit: unknown;
  }>["deposit"]>, _funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.deposit(params), _funds);
  };
  withdraw = async (_funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.withdraw(), _funds);
  };
  compound = async (_funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.compound(), _funds);
  };
  batchUnbond = async (_funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.batchUnbond(), _funds);
  };
  _composeMsg = async (msg: ExecuteMsg, _funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppModuleExecuteMsgBuilder.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.accountClient.sender,
        contract: await this.address(),
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
}