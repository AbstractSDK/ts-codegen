/**
 * This file was automatically generated by @cosmwasm/ts-codegen@latest.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import {
  AbstractQueryClient,
  AbstractAccountQueryClient,
} from "@abstract-money/abstract.js";
import {
  Decimal,
  AssetEntry,
  BondingPeriodSelector,
  Duration,
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  AnsAsset,
  QueryMsg,
  MigrateMsg,
  Expiration,
  Timestamp,
  Uint64,
  ArrayOfTupleOfStringAndArrayOfClaim,
  Claim,
  ArrayOfClaim,
  Addr,
  PoolAddressBaseForAddr,
  AssetInfoBaseForAddr,
  PoolType,
  Config,
  PoolMetadata,
} from "./Autocompounder.types";
import {
  AutocompounderQueryClient,
  AutocompounderClient,
} from "./Autocompounder.client";
import {
  AutocompounderQueryMsgBuilder,
  AutocompounderExecuteMsgBuilder,
} from "./Autocompounder.msg-builder";

export interface IAutocompounderAppQueryClient {
  moduleId: string;
  queryClient: AbstractAccountQueryClient;
  _moduleAddress: string;
  config: () => Promise<Config>;
  pendingClaims: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          pending_claims: unknown;
        }
      >["pending_claims"]
    >
  ) => Promise<Uint128>;
  claims: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          claims: unknown;
        }
      >["claims"]
    >
  ) => Promise<ArrayOfClaim>;
  allClaims: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          all_claims: unknown;
        }
      >["all_claims"]
    >
  ) => Promise<ArrayOfTupleOfStringAndArrayOfClaim>;
  latestUnbonding: () => Promise<Expiration>;
  totalLpPosition: () => Promise<Uint128>;
  balance: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          balance: unknown;
        }
      >["balance"]
    >
  ) => Promise<Uint128>;
  connect: (
    signingClient: SigningCosmWasmClient,
    address: string
  ) => AutocompounderAppClient;
  address: () => Promise<string>;
}
export class AutocompounderAppQueryClient
  implements IAutocompounderAppQueryClient
{
  queryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string;

  constructor({ abstract, accountId, managerAddress, proxyAddress, moduleId }) {
    this.queryClient = new AbstractAccountQueryClient({
      abstract,
      accountId,
      managerAddress,
      proxyAddress,
    });
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.pendingClaims = this.pendingClaims.bind(this);
    this.claims = this.claims.bind(this);
    this.allClaims = this.allClaims.bind(this);
    this.latestUnbonding = this.latestUnbonding.bind(this);
    this.totalLpPosition = this.totalLpPosition.bind(this);
    this.balance = this.balance.bind(this);
  }

  config = async (): Promise<Config> => {
    return this._query(AutocompounderQueryMsgBuilder.config());
  };
  pendingClaims = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          pending_claims: unknown;
        }
      >["pending_claims"]
    >
  ): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.pendingClaims(params));
  };
  claims = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          claims: unknown;
        }
      >["claims"]
    >
  ): Promise<ArrayOfClaim> => {
    return this._query(AutocompounderQueryMsgBuilder.claims(params));
  };
  allClaims = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          all_claims: unknown;
        }
      >["all_claims"]
    >
  ): Promise<ArrayOfTupleOfStringAndArrayOfClaim> => {
    return this._query(AutocompounderQueryMsgBuilder.allClaims(params));
  };
  latestUnbonding = async (): Promise<Expiration> => {
    return this._query(AutocompounderQueryMsgBuilder.latestUnbonding());
  };
  totalLpPosition = async (): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.totalLpPosition());
  };
  balance = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          balance: unknown;
        }
      >["balance"]
    >
  ): Promise<Uint128> => {
    return this._query(AutocompounderQueryMsgBuilder.balance(params));
  };
  _query = (queryMsg: QueryMsg): Promise<any> => {
    return this.queryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg,
    });
  };
  address = async (): Promise<string> => {
    if (!this._moduleAddress) {
      this._moduleAddress = await this.queryClient.getModuleAddress(
        this.moduleId
      );
    }

    return this._moduleAddress;
  };
  connect = (
    signingClient: SigningCosmWasmClient,
    address: string
  ): AutocompounderAppClient => {
    return new AutocompounderAppClient({
      accountId: this.queryClient.accountId,
      managerAddress: this.queryClient.managerAddress,
      proxyAddress: this.queryClient.proxyAddress,
      abstract: this.queryClient.abstract.upgrade(signingClient, address),
    });
  };
}
