/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { AbstractQueryClient, AbstractAccountQueryClient } from "@abstract-money/abstract.js";
import { Decimal, InstantiateMsg, ExecuteMsg, Uint128, AssetInfoBaseForString, AssetBaseForString, QueryMsg, MigrateMsg, StateResponse } from "./Etf.types";
import { EtfQueryClient, EtfClient } from "./Etf.client";
import { EtfQueryMsgBuilder, EtfExecuteMsgBuilder } from "./Etf.msg-builder";
export interface IEtfAppQueryClient {
  moduleId: string;
  queryClient: AbstractAccountQueryClient;
  _moduleAddress: string;
  state: () => Promise<StateResponse>;
  connect: (signingClient: SigningCosmWasmClient, address: string) => EtfAppClient;
  address: () => Promise<string>;
}
export class EtfAppQueryClient implements IEtfAppQueryClient {
  queryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string;

  constructor({
    abstract,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }) {
    this.queryClient = new AbstractAccountQueryClient({
      abstract,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.state = this.state.bind(this);
  }

  state = async (): Promise<StateResponse> => {
    return this._query(EtfQueryMsgBuilder.state());
  };
  _query = (queryMsg: QueryMsg): Promise<any> => {
    return this.queryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
  address = async (): Promise<string> => {
    if (!this._moduleAddress) {
      this._moduleAddress = await this.queryClient.getModuleAddress(this.moduleId);
    }

    return this._moduleAddress;
  };
  connect = (signingClient: SigningCosmWasmClient, address: string): EtfAppClient => {
    return new EtfAppClient({
      accountId: this.queryClient.accountId,
      managerAddress: this.queryClient.managerAddress,
      proxyAddress: this.queryClient.proxyAddress,
      abstract: this.queryClient.abstract.upgrade(signingClient, address)
    });
  };
}