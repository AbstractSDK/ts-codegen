/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { AdminAddrResponse, CodeIdResponse, CodeIdType, Uint128, Binary, CreateWalletMsg, Guardians, MultiSig, Coin, Cw20Coin, ExecuteMsg, Addr, ProxyMigrationTxMsg, WalletAddr, CanonicalAddr, RelayTransaction, FeeResponse, GovecAddrResponse, InstantiateMsg, QueryMsg, WalletQueryPrefix, Duration, StakingOptions, WalletInfo, ContractVersion, WalletsOfResponse, WalletsResponse } from "./Factory.types";
import { FactoryQueryClient, FactoryClient } from "./Factory.client";
export interface FactoryAdminAddrQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<AdminAddrResponse, Error, AdminAddrResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useFactoryAdminAddrQuery({
  client,
  options
}: FactoryAdminAddrQuery) {
  return useQuery<AdminAddrResponse, Error, AdminAddrResponse, (string | undefined)[]>(["factoryAdminAddr", client.contractAddress], () => client.adminAddr(), options);
}
export interface FactoryGovecAddrQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<GovecAddrResponse, Error, GovecAddrResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useFactoryGovecAddrQuery({
  client,
  options
}: FactoryGovecAddrQuery) {
  return useQuery<GovecAddrResponse, Error, GovecAddrResponse, (string | undefined)[]>(["factoryGovecAddr", client.contractAddress], () => client.govecAddr(), options);
}
export interface FactoryFeeQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<FeeResponse, Error, FeeResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useFactoryFeeQuery({
  client,
  options
}: FactoryFeeQuery) {
  return useQuery<FeeResponse, Error, FeeResponse, (string | undefined)[]>(["factoryFee", client.contractAddress], () => client.fee(), options);
}
export interface FactoryCodeIdQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<CodeIdResponse, Error, CodeIdResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    ty: CodeIdType;
  };
}
export function useFactoryCodeIdQuery({
  client,
  args,
  options
}: FactoryCodeIdQuery) {
  return useQuery<CodeIdResponse, Error, CodeIdResponse, (string | undefined)[]>(["factoryCodeId", client.contractAddress, JSON.stringify(args)], () => client.codeId({
    ty: args.ty
  }), options);
}
export interface FactoryWalletsOfQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<WalletsOfResponse, Error, WalletsOfResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: string;
    user: string;
  };
}
export function useFactoryWalletsOfQuery({
  client,
  args,
  options
}: FactoryWalletsOfQuery) {
  return useQuery<WalletsOfResponse, Error, WalletsOfResponse, (string | undefined)[]>(["factoryWalletsOf", client.contractAddress, JSON.stringify(args)], () => client.walletsOf({
    limit: args.limit,
    startAfter: args.startAfter,
    user: args.user
  }), options);
}
export interface FactoryWalletsQuery {
  client: FactoryQueryClient;
  options?: Omit<UseQueryOptions<WalletsResponse, Error, WalletsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: WalletQueryPrefix;
  };
}
export function useFactoryWalletsQuery({
  client,
  args,
  options
}: FactoryWalletsQuery) {
  return useQuery<WalletsResponse, Error, WalletsResponse, (string | undefined)[]>(["factoryWallets", client.contractAddress, JSON.stringify(args)], () => client.wallets({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface FactoryUpdateAdminMutation {
  client: FactoryClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export interface FactoryUpdateGovecAddrMutation {
  client: FactoryClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryUpdateGovecAddrMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateGovecAddrMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateGovecAddrMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateGovecAddr(msg, fee, memo, funds), options);
}
export interface FactoryUpdateWalletFeeMutation {
  client: FactoryClient;
  msg: {
    newFee: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryUpdateWalletFeeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateWalletFeeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateWalletFeeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateWalletFee(msg, fee, memo, funds), options);
}
export interface FactoryUpdateCodeIdMutation {
  client: FactoryClient;
  msg: {
    newCodeId: number;
    ty: CodeIdType;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryUpdateCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCodeId(msg, fee, memo, funds), options);
}
export interface FactoryMigrateWalletMutation {
  client: FactoryClient;
  msg: {
    migrationMsg: ProxyMigrationTxMsg;
    walletAddress: WalletAddr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryMigrateWalletMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryMigrateWalletMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryMigrateWalletMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.migrateWallet(msg, fee, memo, funds), options);
}
export interface FactoryUpdateProxyUserMutation {
  client: FactoryClient;
  msg: {
    newUser: Addr;
    oldUser: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryUpdateProxyUserMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateProxyUserMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateProxyUserMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateProxyUser(msg, fee, memo, funds), options);
}
export interface FactoryCreateWalletMutation {
  client: FactoryClient;
  msg: {
    createWalletMsg: CreateWalletMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryCreateWalletMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryCreateWalletMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryCreateWalletMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createWallet(msg, fee, memo, funds), options);
}