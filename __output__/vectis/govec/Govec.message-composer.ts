/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AppExecuteMsg, AppExecuteMsgFactory } from "@abstract-money/core";
import { CanExecuteRelayResponse, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, WasmMsg, Binary, Coin, Empty, ExecuteMsgForEmpty, Addr, RelayTransaction, Guardians, MultiSig, InfoResponse, ContractVersion, InstantiateMsg, CreateWalletMsg, QueryMsg, Uint64 } from "./Govec.types";
export interface GovecMessage {
  contractAddress: string;
  sender: string;
  execute: ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  revertFreezeStatus: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  relay: ({
    transaction
  }: {
    transaction: RelayTransaction;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  rotateUserKey: ({
    newUserAddress
  }: {
    newUserAddress: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  addRelayer: ({
    newRelayerAddress
  }: {
    newRelayerAddress: Addr;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  removeRelayer: ({
    relayerAddress
  }: {
    relayerAddress: Addr;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateGuardians: ({
    guardians,
    newMultisigCodeId
  }: {
    guardians: Guardians;
    newMultisigCodeId?: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateLabel: ({
    newLabel
  }: {
    newLabel: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class GovecMessageComposer implements GovecMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.execute = this.execute.bind(this);
    this.revertFreezeStatus = this.revertFreezeStatus.bind(this);
    this.relay = this.relay.bind(this);
    this.rotateUserKey = this.rotateUserKey.bind(this);
    this.addRelayer = this.addRelayer.bind(this);
    this.removeRelayer = this.removeRelayer.bind(this);
    this.updateGuardians = this.updateGuardians.bind(this);
    this.updateLabel = this.updateLabel.bind(this);
  }

  execute = ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      execute: {
        msgs
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  revertFreezeStatus = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      revert_freeze_status: {}
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  relay = ({
    transaction
  }: {
    transaction: RelayTransaction;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      relay: {
        transaction
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  rotateUserKey = ({
    newUserAddress
  }: {
    newUserAddress: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      rotate_user_key: {
        new_user_address: newUserAddress
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  addRelayer = ({
    newRelayerAddress
  }: {
    newRelayerAddress: Addr;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      add_relayer: {
        new_relayer_address: newRelayerAddress
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  removeRelayer = ({
    relayerAddress
  }: {
    relayerAddress: Addr;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      remove_relayer: {
        relayer_address: relayerAddress
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  updateGuardians = ({
    guardians,
    newMultisigCodeId
  }: {
    guardians: Guardians;
    newMultisigCodeId?: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      update_guardians: {
        guardians,
        new_multisig_code_id: newMultisigCodeId
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
  updateLabel = ({
    newLabel
  }: {
    newLabel: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      update_label: {
        new_label: newLabel
      }
    };
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: funds_
      })
    };
  };
}