// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`execute classes array types 1`] = `
"export class SG721Client implements SG721Instance {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateEdges = this.updateEdges.bind(this);
  }

  updateEdges = async ({
    edges,
    nested,
    supernested
  }: {
    edges: number[][];
    nested: number[][][];
    supernested: string[][][][][][];
  }, fee: number | StdFee | \\"auto\\" = \\"auto\\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_edges: {
        edges,
        nested,
        supernested
      }
    }, fee, memo, funds);
  };
}"
`;

exports[`execute interfaces no extends 1`] = `
"export interface SG721Instance {
  contractAddress: string;
  sender: string;
  updateEdges: ({
    edges,
    nested,
    supernested
  }: {
    edges: number[][];
    nested: number[][][];
    supernested: string[][][][][][];
  }, fee?: number | StdFee | \\"auto\\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}"
`;

exports[`execute_msg_for__empty 1`] = `"export type ExecuteMsg = ExecuteMsg;"`;

exports[`query classes 1`] = `
"export class SG721QueryClient implements SG721ReadOnlyInstance {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.updateEdges = this.updateEdges.bind(this);
  }

  updateEdges = async ({
    edges,
    nested,
    supernested
  }: {
    edges: number[][];
    nested: number[][][];
    supernested: string[][][][][][];
  }): Promise<UpdateEdgesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      update_edges: {
        edges,
        nested,
        supernested
      }
    });
  };
}"
`;
