// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AutocompounderAppClient 1`] = `
"export class AutocompounderAppClient implements IAutocompounderAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstract,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }) {
    super(base);
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, base.abstract);
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.compound = this.compound.bind(this);
    this.batchUnbond = this.batchUnbond.bind(this);
  }

  updateFeeConfig = async (params: CamelCasedProperties<Extract<QueryMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]): Promise<UpdateFeeConfigResponse> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.updateFeeConfig(params));
  };
  deposit = async (params: CamelCasedProperties<Extract<QueryMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]): Promise<DepositResponse> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.deposit(params));
  };
  withdraw = async (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]): Promise<WithdrawResponse> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.withdraw());
  };
  compound = async (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]): Promise<CompoundResponse> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.compound());
  };
  batchUnbond = async (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]): Promise<BatchUnbondResponse> => {
    return this._composeMsg(AutocompounderExecuteMsgBuilder.batchUnbond());
  };
  _composeMsg = (msg: AutocompounderExecuteMsg, _funds?: Coin[]): Promise<MsgExecuteContractEncodeObject> => {
    const moduleMsg: AppExecuteMsg<AutocompounderExecuteMsg> = AppModuleExecuteMsgBuilder.executeApp(msg);
    return {
      typeUrl: \\"/cosmwasm.wasm.v1.MsgExecuteContract\\",
      value: MsgExecuteContract.fromPartial({
        sender: this.accountClient.sender,
        contract: await this.address(),
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds
      })
    };
  };
}"
`;

exports[`AutocompounderAppQueryClient 1`] = `
"export class AutocompounderAppQueryClient implements IAutocompounderAppQueryClient {
  queryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string;

  constructor({
    abstract,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }) {
    this.queryClient = new AbstractAccountQueryClient({
      abstract,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.pendingClaims = this.pendingClaims.bind(this);
    this.claims = this.claims.bind(this);
    this.allClaims = this.allClaims.bind(this);
    this.latestUnbonding = this.latestUnbonding.bind(this);
    this.totalLpPosition = this.totalLpPosition.bind(this);
    this.balance = this.balance.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.config());
  };
  pendingClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>): Promise<PendingClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.pendingClaims(params));
  };
  claims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>): Promise<ClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.claims(params));
  };
  allClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>): Promise<AllClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.allClaims(params));
  };
  latestUnbonding = async (): Promise<LatestUnbondingResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.latestUnbonding());
  };
  totalLpPosition = async (): Promise<TotalLpPositionResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.totalLpPosition());
  };
  balance = async (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>): Promise<BalanceResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.balance(params));
  };
  _query = (queryMsg: QueryMsg): Promise<any> => {
    return this.queryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: \\"app\\",
      queryMsg
    });
  };
  address = async (): Promise<string> => {
    if (!this._moduleAddress) {
      this._moduleAddress = await this.queryClient.getModuleAddress(this.moduleId);
    }

    return this._moduleAddress;
  };
  connect = (signingClient: SigningCosmWasmClient, address: string): AutocompounderAppClient => {
    return new AutocompounderAppClient({
      accountId: this.queryClient.accountId,
      managerAddress: this.queryClient.managerAddress,
      proxyAddress: this.queryClient.proxyAddress,
      abstract: this.queryClient.abstract.upgrade(signingClient, address)
    });
  };
}"
`;

exports[`IAutocompounderAppClient 1`] = `
"export interface IAutocompounderAppClient extends IAutocompounderAppQueryClient {
  accountClient: AbstractAccountClient;
  updateFeeConfig: (params: CamelCasedProperties<Extract<QueryMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]) => Promise<UpdateFeeConfigResponse>;
  deposit: (params: CamelCasedProperties<Extract<QueryMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]) => Promise<DepositResponse>;
  withdraw: (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]) => Promise<WithdrawResponse>;
  compound: (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]) => Promise<CompoundResponse>;
  batchUnbond: (fee?: number | StdFee | \\"auto\\", memo?: string, funds?: Coin[]) => Promise<BatchUnbondResponse>;
}"
`;

exports[`IAutocompounderAppQueryClient 1`] = `
"export interface IAutocompounderAppQueryClient {
  moduleId: string;
  queryClient: AbstractAccountQueryClient;
  _moduleAddress: string;
  config: () => Promise<ConfigResponse>;
  pendingClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>) => Promise<PendingClaimsResponse>;
  claims: (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>) => Promise<ClaimsResponse>;
  allClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>) => Promise<AllClaimsResponse>;
  latestUnbonding: () => Promise<LatestUnbondingResponse>;
  totalLpPosition: () => Promise<TotalLpPositionResponse>;
  balance: (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>) => Promise<BalanceResponse>;
  connect: (signingClient: SigningCosmWasmClient, address: string) => AutocompounderAppClient;
  address: () => Promise<string>;
}"
`;
