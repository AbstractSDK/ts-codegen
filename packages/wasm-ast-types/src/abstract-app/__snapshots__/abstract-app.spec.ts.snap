// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AutocompounderAppClient 1`] = `
"export class AutocompounderAppClient extends AutocompounderAppQueryClient implements IAutocompounderAppClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.compound = this.compound.bind(this);
    this.batchUnbond = this.batchUnbond.bind(this);
  }

  updateFeeConfig = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.updateFeeConfig(params), fee_, memo_, funds_);
  };
  deposit = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.deposit(params), fee_, memo_, funds_);
  };
  withdraw = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.withdraw(), fee_, memo_, funds_);
  };
  compound = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.compound(), fee_, memo_, funds_);
  };
  batchUnbond = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.batchUnbond(), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;

exports[`AutocompounderAppQueryClient 1`] = `
"export class AutocompounderAppQueryClient implements IAutocompounderAppQueryClient {
  accountPublicClient: AccountPublicClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    accountPublicClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    moduleId: string;
  }) {
    this.accountPublicClient = accountPublicClient;
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.pendingClaims = this.pendingClaims.bind(this);
    this.claims = this.claims.bind(this);
    this.allClaims = this.allClaims.bind(this);
    this.latestUnbonding = this.latestUnbonding.bind(this);
    this.totalLpPosition = this.totalLpPosition.bind(this);
    this.balance = this.balance.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.config());
  };
  pendingClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>): Promise<PendingClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.pendingClaims(params));
  };
  claims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>): Promise<ClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.claims(params));
  };
  allClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>): Promise<AllClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.allClaims(params));
  };
  latestUnbonding = async (): Promise<LatestUnbondingResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.latestUnbonding());
  };
  totalLpPosition = async (): Promise<TotalLpPositionResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.totalLpPosition());
  };
  balance = async (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>): Promise<BalanceResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.balance(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountPublicClient.getModuleAddress({
        id: this.moduleId
      });

      if (address === null) {
        throw new Error(\`Module \${this.moduleId} not installed\`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountPublicClient.queryModule({
      moduleId: this.moduleId,
      moduleType: \\"app\\",
      queryMsg
    });
  };
}"
`;

exports[`BettingAppClient 1`] = `
"export class BettingAppClient extends BettingAppQueryClient implements IBettingAppClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.createRound = this.createRound.bind(this);
    this.register = this.register.bind(this);
    this.updateAccounts = this.updateAccounts.bind(this);
    this.placeBet = this.placeBet.bind(this);
    this.distributeWinnings = this.distributeWinnings.bind(this);
    this.closeRound = this.closeRound.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  createRound = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    create_round: unknown;
  }>[\\"create_round\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.createRound(params), fee_, memo_, funds_);
  };
  register = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    register: unknown;
  }>[\\"register\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.register(params), fee_, memo_, funds_);
  };
  updateAccounts = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_accounts: unknown;
  }>[\\"update_accounts\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.updateAccounts(params), fee_, memo_, funds_);
  };
  placeBet = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    place_bet: unknown;
  }>[\\"place_bet\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.placeBet(params), fee_, memo_, funds_);
  };
  distributeWinnings = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    distribute_winnings: unknown;
  }>[\\"distribute_winnings\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.distributeWinnings(params), fee_, memo_, funds_);
  };
  closeRound = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    close_round: unknown;
  }>[\\"close_round\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.closeRound(params), fee_, memo_, funds_);
  };
  updateConfig = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>[\\"update_config\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.updateConfig(params), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;

exports[`BettingAppQueryClient 1`] = `
"export class BettingAppQueryClient implements IBettingAppQueryClient {
  accountPublicClient: AccountPublicClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    accountPublicClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    moduleId: string;
  }) {
    this.accountPublicClient = accountPublicClient;
    this.moduleId = moduleId;
    this.round = this.round.bind(this);
    this.listRounds = this.listRounds.bind(this);
    this.odds = this.odds.bind(this);
    this.listOdds = this.listOdds.bind(this);
    this.config = this.config.bind(this);
    this.bets = this.bets.bind(this);
  }

  round = async (params: CamelCasedProperties<Extract<QueryMsg, {
    round: unknown;
  }>[\\"round\\"]>): Promise<RoundResponse> => {
    return this._query(BettingQueryMsgBuilder.round(params));
  };
  listRounds = async (params: CamelCasedProperties<Extract<QueryMsg, {
    list_rounds: unknown;
  }>[\\"list_rounds\\"]>): Promise<ListRoundsResponse> => {
    return this._query(BettingQueryMsgBuilder.listRounds(params));
  };
  odds = async (params: CamelCasedProperties<Extract<QueryMsg, {
    odds: unknown;
  }>[\\"odds\\"]>): Promise<OddsResponse> => {
    return this._query(BettingQueryMsgBuilder.odds(params));
  };
  listOdds = async (params: CamelCasedProperties<Extract<QueryMsg, {
    list_odds: unknown;
  }>[\\"list_odds\\"]>): Promise<ListOddsResponse> => {
    return this._query(BettingQueryMsgBuilder.listOdds(params));
  };
  config = async (): Promise<ConfigResponse> => {
    return this._query(BettingQueryMsgBuilder.config());
  };
  bets = async (params: CamelCasedProperties<Extract<QueryMsg, {
    bets: unknown;
  }>[\\"bets\\"]>): Promise<BetsResponse> => {
    return this._query(BettingQueryMsgBuilder.bets(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountPublicClient.getModuleAddress({
        id: this.moduleId
      });

      if (address === null) {
        throw new Error(\`Module \${this.moduleId} not installed\`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountPublicClient.queryModule({
      moduleId: this.moduleId,
      moduleType: \\"app\\",
      queryMsg
    });
  };
}"
`;

exports[`DexAdapterClient 1`] = `
"export class DexAdapterClient extends DexAdapterQueryClient implements IDexAdapterClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.updateFee = this.updateFee.bind(this);
    this.ansAction = this.ansAction.bind(this);
    this.rawAction = this.rawAction.bind(this);
  }

  updateFee = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee: unknown;
  }>[\\"update_fee\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.updateFee(params), fee_, memo_, funds_);
  };
  ansAction = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    ans_action: unknown;
  }>[\\"ans_action\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.ansAction(params), fee_, memo_, funds_);
  };
  rawAction = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    raw_action: unknown;
  }>[\\"raw_action\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.rawAction(params), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const moduleMsg: AdapterExecuteMsg<ExecuteMsg> = AdapterExecuteMsgFactory.executeAdapter({
      request: msg,
      proxyAddress: this.accountPublicClient.proxyAddress
    });
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;

exports[`IAutocompounderAppClient 1`] = `
"export interface IAutocompounderAppClient extends IAutocompounderAppQueryClient {
  accountWalletClient: AccountWalletClient;
  updateFeeConfig: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  deposit: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  compound: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  batchUnbond: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}"
`;

exports[`IAutocompounderAppQueryClient 1`] = `
"export interface IAutocompounderAppQueryClient {
  moduleId: string;
  accountPublicClient: AccountPublicClient;
  _moduleAddress: string | undefined;
  config: () => Promise<ConfigResponse>;
  pendingClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>) => Promise<PendingClaimsResponse>;
  claims: (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>) => Promise<ClaimsResponse>;
  allClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>) => Promise<AllClaimsResponse>;
  latestUnbonding: () => Promise<LatestUnbondingResponse>;
  totalLpPosition: () => Promise<TotalLpPositionResponse>;
  balance: (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>) => Promise<BalanceResponse>;
  getAddress: () => Promise<string>;
}"
`;

exports[`IBettingAppClient 1`] = `
"export interface IBettingAppClient extends IBettingAppQueryClient {
  accountWalletClient: AccountWalletClient;
  createRound: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    create_round: unknown;
  }>[\\"create_round\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  register: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    register: unknown;
  }>[\\"register\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateAccounts: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_accounts: unknown;
  }>[\\"update_accounts\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  placeBet: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    place_bet: unknown;
  }>[\\"place_bet\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  distributeWinnings: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    distribute_winnings: unknown;
  }>[\\"distribute_winnings\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  closeRound: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    close_round: unknown;
  }>[\\"close_round\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>[\\"update_config\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}"
`;

exports[`IBettingAppQueryClient 1`] = `
"export interface IBettingAppQueryClient {
  moduleId: string;
  accountPublicClient: AccountPublicClient;
  _moduleAddress: string | undefined;
  round: (params: CamelCasedProperties<Extract<QueryMsg, {
    round: unknown;
  }>[\\"round\\"]>) => Promise<RoundResponse>;
  listRounds: (params: CamelCasedProperties<Extract<QueryMsg, {
    list_rounds: unknown;
  }>[\\"list_rounds\\"]>) => Promise<ListRoundsResponse>;
  odds: (params: CamelCasedProperties<Extract<QueryMsg, {
    odds: unknown;
  }>[\\"odds\\"]>) => Promise<OddsResponse>;
  listOdds: (params: CamelCasedProperties<Extract<QueryMsg, {
    list_odds: unknown;
  }>[\\"list_odds\\"]>) => Promise<ListOddsResponse>;
  config: () => Promise<ConfigResponse>;
  bets: (params: CamelCasedProperties<Extract<QueryMsg, {
    bets: unknown;
  }>[\\"bets\\"]>) => Promise<BetsResponse>;
  getAddress: () => Promise<string>;
}"
`;

exports[`IbcMailClientAppClient 1`] = `
"export class IbcMailClientAppClient extends IbcMailClientAppQueryClient implements IIbcMailClientAppClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.sendMessage = this.sendMessage.bind(this);
    this.receiveMessage = this.receiveMessage.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  sendMessage = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    send_message: unknown;
  }>[\\"send_message\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.sendMessage(params), fee_, memo_, funds_);
  };
  receiveMessage = async (message: Message, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.receiveMessage(message), fee_, memo_, funds_);
  };
  updateConfig = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.updateConfig(), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;
