// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AutocompounderAppClient 1`] = `
"export class AutocompounderAppClient extends AutocompounderAppQueryClient implements IAutocompounderAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.compound = this.compound.bind(this);
    this.batchUnbond = this.batchUnbond.bind(this);
  }

  updateFeeConfig = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.updateFeeConfig(params), fee_, memo_, funds_);
  };
  deposit = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.deposit(params), fee_, memo_, funds_);
  };
  withdraw = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.withdraw(), fee_, memo_, funds_);
  };
  compound = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.compound(), fee_, memo_, funds_);
  };
  batchUnbond = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(AutocompounderExecuteMsgBuilder.batchUnbond(), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;

exports[`AutocompounderAppQueryClient 1`] = `
"export class AutocompounderAppQueryClient implements IAutocompounderAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.pendingClaims = this.pendingClaims.bind(this);
    this.claims = this.claims.bind(this);
    this.allClaims = this.allClaims.bind(this);
    this.latestUnbonding = this.latestUnbonding.bind(this);
    this.totalLpPosition = this.totalLpPosition.bind(this);
    this.balance = this.balance.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.config());
  };
  pendingClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>): Promise<PendingClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.pendingClaims(params));
  };
  claims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>): Promise<ClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.claims(params));
  };
  allClaims = async (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>): Promise<AllClaimsResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.allClaims(params));
  };
  latestUnbonding = async (): Promise<LatestUnbondingResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.latestUnbonding());
  };
  totalLpPosition = async (): Promise<TotalLpPositionResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.totalLpPosition());
  };
  balance = async (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>): Promise<BalanceResponse> => {
    return this._query(AutocompounderQueryMsgBuilder.balance(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountQueryClient.getModuleAddress(this.moduleId);

      if (address === null) {
        throw new Error(\`Module \${this.moduleId} not installed\`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  connectSigningClient = (signingClient: SigningCosmWasmClient, address: string): AutocompounderAppClient => {
    return new AutocompounderAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(signingClient, address)
    });
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: \\"app\\",
      queryMsg
    });
  };
}"
`;

exports[`DexAdapterClient 1`] = `
"export class DexAdapterClient extends DexAdapterQueryClient implements IDexAdapterClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.updateFee = this.updateFee.bind(this);
    this.ansAction = this.ansAction.bind(this);
    this.rawAction = this.rawAction.bind(this);
  }

  updateFee = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee: unknown;
  }>[\\"update_fee\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.updateFee(params), fee_, memo_, funds_);
  };
  ansAction = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    ans_action: unknown;
  }>[\\"ans_action\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.ansAction(params), fee_, memo_, funds_);
  };
  rawAction = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    raw_action: unknown;
  }>[\\"raw_action\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(DexClientExecuteMsgBuilder.rawAction(params), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AdapterExecuteMsg<ExecuteMsg> = AdapterExecuteMsgFactory.executeAdapter({
      request: msg,
      proxyAddress: this.accountQueryClient.proxyAddress
    });
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;

exports[`IAutocompounderAppClient 1`] = `
"export interface IAutocompounderAppClient extends IAutocompounderAppQueryClient {
  accountClient: AbstractAccountClient;
  updateFeeConfig: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_fee_config: unknown;
  }>[\\"update_fee_config\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  deposit: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    deposit: unknown;
  }>[\\"deposit\\"]>, fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  compound: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  batchUnbond: (fee_?: number | StdFee | \\"auto\\", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}"
`;

exports[`IAutocompounderAppQueryClient 1`] = `
"export interface IAutocompounderAppQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string | undefined;
  config: () => Promise<ConfigResponse>;
  pendingClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    pending_claims: unknown;
  }>[\\"pending_claims\\"]>) => Promise<PendingClaimsResponse>;
  claims: (params: CamelCasedProperties<Extract<QueryMsg, {
    claims: unknown;
  }>[\\"claims\\"]>) => Promise<ClaimsResponse>;
  allClaims: (params: CamelCasedProperties<Extract<QueryMsg, {
    all_claims: unknown;
  }>[\\"all_claims\\"]>) => Promise<AllClaimsResponse>;
  latestUnbonding: () => Promise<LatestUnbondingResponse>;
  totalLpPosition: () => Promise<TotalLpPositionResponse>;
  balance: (params: CamelCasedProperties<Extract<QueryMsg, {
    balance: unknown;
  }>[\\"balance\\"]>) => Promise<BalanceResponse>;
  connectSigningClient: (signingClient: SigningCosmWasmClient, address: string) => AutocompounderAppClient;
  getAddress: () => Promise<string>;
}"
`;

exports[`IbcMailClientAppClient 1`] = `
"export class IbcMailClientAppClient extends IbcMailClientAppQueryClient implements IIbcMailClientAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.sendMessage = this.sendMessage.bind(this);
    this.receiveMessage = this.receiveMessage.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  sendMessage = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    send_message: unknown;
  }>[\\"send_message\\"]>, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.sendMessage(params), fee_, memo_, funds_);
  };
  receiveMessage = async (message: Message, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.receiveMessage(message), fee_, memo_, funds_);
  };
  updateConfig = async (fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(IbcMailClientExecuteMsgBuilder.updateConfig(), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | \\"auto\\" = \\"auto\\", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}"
`;
