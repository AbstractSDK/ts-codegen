export declare const contractContextBase = "\nimport {\n  CosmWasmClient,\n  SigningCosmWasmClient,\n} from '@cosmjs/cosmwasm-stargate';\n\nexport interface IContractConstructor {\n  address: string | undefined;\n  cosmWasmClient: CosmWasmClient | undefined;\n  signingCosmWasmClient: SigningCosmWasmClient | undefined;\n}\n\nexport const noSigningErrorMessage = 'signingCosmWasmClient not connected';\n\nexport const noCosmWasmClientErrorMessage = 'cosmWasmClient not connected';\n\nexport const noAddressErrorMessage = \"address doesn't exist\";\n\nexport class ContractBase {\n  constructor(\n    public readonly address: string | undefined,\n    public readonly cosmWasmClient: CosmWasmClient | undefined,\n    public readonly signingCosmWasmClient: SigningCosmWasmClient | undefined\n  ) {}\n}\n\nexport function getSigningClientDefault<T>(\n  intance: ContractBase,\n  contractAddr: string,\n  T: new (\n    client: SigningCosmWasmClient,\n    sender: string,\n    contractAddress: string\n  ) => T\n): T {\n  if (!intance.signingCosmWasmClient) throw new Error(noSigningErrorMessage);\n  if (!intance.address) throw new Error(noAddressErrorMessage);\n  return new T(intance.signingCosmWasmClient, intance.address, contractAddr);\n}\n\nexport function getQueryClientDefault<T>(\n  intance: ContractBase,\n  contractAddr: string,\n  T: new (client: CosmWasmClient, contractAddress: string) => T\n): T {\n  if (!intance.cosmWasmClient) throw new Error(noCosmWasmClientErrorMessage);\n  return new T(intance.cosmWasmClient, contractAddr);\n}\n\nexport function getMessageComposerDefault<T>(\n  intance: ContractBase,\n  contractAddr: string,\n  T: new (address: string, contractAddress: string) => T\n): T {\n  if (!intance.address) throw new Error(noAddressErrorMessage);\n  return new T(intance.address, contractAddr);\n}\n";
